<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
(function () {
    var mod, obj,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json");

    var log = new Log();
    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }
    if (action == "downloadLogFile") {
        var applicationKey = request.getParameter("applicationKey");
        var stage = request.getParameter("applicationStage");
        var version = request.getParameter("applicationVersion");
        var date = request.getParameter("date");
        var downloadFile = request.getParameter("downloadFile");
        var pageNumber = request.getParameter("pageNumber");

        if(pageNumber == null || pageNumber == 'null'){
            pageNumber = -1;
        }

        mod = jagg.module("logdownload");

        var deployToStagePermission = PERMISSION_DEPLOY_TO + stage;
        if (jagg.module("permission").isUserAccessGrantedForPlatform(deployToStagePermission)){
            var result = mod.downloadLogFile(applicationKey, stage, version, date, pageNumber);
            var logMap = {};
            if (result instanceof Packages.org.wso2.carbon.appfactory.provisioning.runtime.beans.DeploymentLogs){
                var map = result.getDeploymentLogs();
                var iterator = map.entrySet().iterator();
                while (iterator.hasNext()) {
                   var entry = iterator.next();
                   var record = "";
                   var containerLog = "";
                   while ((record = entry.getValue().readLine()) != null) {
                      containerLog += record + "\n";
                   }
                   logMap[entry.getKey()] = containerLog;
                }
            }
            response.error = false;
            response.contentType = 'application/txt';
            print(logMap);
        } else {
            response.error = true;
            response.message = "You don't have permission to download the log file";
            print(response);
        }

    } else if (action === "getAppVersionsInStages") {

        mod = jagg.module("logdownload");

        var userName = request.getParameter("userName");
        var applicationKey = request.getParameter("applicationKey");

        try {
            print(mod.getVersionsOfApplicationInStages(userName, applicationKey));
        } catch (e) {
            var msg = "Error while retrieving App Owner for app key " + applicationKey + "\n";
            log.error(msg + e.message);
            throw msg;
        }
    } else {
        log.error("No action specified");
    }
}());

%>
